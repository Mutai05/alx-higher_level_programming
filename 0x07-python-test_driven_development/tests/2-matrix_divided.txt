# Test cases for matrix_divided function

>>> from matrix_divided import matrix_divided

# Test case 1: Divide all elements of a 2x3 matrix by 3
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test case 2: Divide all elements of a 3x3 matrix by 2
>>> matrix = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]
>>> matrix_divided(matrix, 2)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]

# Test case 3: Attempt to divide a matrix by 0 (should raise ZeroDivisionError)
>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Test case 4: Pass a non-numeric value as div (should raise TypeError)
>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, 'a')
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test case 5: Pass a matrix with rows of different lengths (should raise TypeError)
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test case 6: Pass a non-matrix value (should raise TypeError)
>>> matrix = "not a matrix"
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
